#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define DEFAULT 0
#define FN 1
#define WIN 2
#define UNI 4
#define MOD 5

#define HYPER LS(LC(LA(LGUI)))
#define MEH LS(LC(LA))
#define TSKMNG LC(LA(DEL))
#define MENU K_CMENU

/ {
    behaviors {
      #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";
        label = "macro_version";
        #binding-cells = <0>;
        bindings = <&kp RET>;
      };
      #endif

      hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };

      bspc_del: backspace_delete {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp BACKSPACE>, <&kp DELETE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      td_fn: tap_dance_fn {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&mo FN>, <&to FN>;
      };

      td_win: tap_dance_win {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&mo WIN>, <&kp RGUI>;
      };

      sym1: symbol_1 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp EXCLAMATION>, <&kp PIPE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      sym2: symbol_2 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp LEFT_BRACKET>, <&kp CARET>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      sym3: symbol_3 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp LEFT_BRACE>, <&kp MINUS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      sym4: symbol_4 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp LEFT_PARENTHESIS>, <&kp PERCENT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      sym5: symdol_5 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp STAR>, <&kp HASH>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      sym6: symbol_6 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp EQUAL>, <&kp PLUS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      sym7: symbol_7 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp RIGHT_PARENTHESIS>, <&kp AMPERSAND>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      sym8: symbol_8 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp RIGHT_BRACE>, <&kp UNDERSCORE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      sym9: symbol_9 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp RIGHT_BRACKET>, <&kp DOLLAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      sym0: symbol_0 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp QUESTION>, <&kp AT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

/*
      mt_a: modtap_a {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        flavor = "hold-preferred";
        bindings = <&macro_acute_a>, <&kp A>;
      };
*/
    };

    keymap {
      compatible = "zmk,keymap";

      default_layer {
        bindings = <
          &kp BSLH   &sym1      &sym2      &sym3     &sym4     &sym5     &kp LC(X)                                                        &mo MOD    &sym6  &sym7   &sym8     &sym9    &sym0      &kp FSLH
          &kp GRAVE  &kp SQT    &kp COMMA  &kp DOT   &kp P     &kp Y     &kp LC(C)                                                        &kp PSCRN  &kp F  &kp G   &kp C     &kp R    &kp L      &kp MINUS
          &kp ESC    &kp A      &kp O      &kp E     &kp U     &kp I     &kp LC(V)     &kp LCTRL  &kp LALT   &kp LALT  &kp RCTRL          &kp MENU   &kp D  &kp H   &kp T     &kp N    &kp S      &kp TAB
          &mo UNI    &kp SEMI   &kp Q      &kp J     &kp K     &kp X                              &td_fn     &td_win                                 &kp B  &kp M   &kp W     &kp V    &kp Z      &mo UNI
          &td_fn     &kp PG_UP  &kp HOME   &kp LEFT  &kp RIGHT              &bspc_del  &kp RSHFT  &kp DEL    &kp INS   &mt LSHFT ENTER  &kp SPACE           &kp UP  &kp DOWN  &kp END  &kp PG_DN  &td_fn
        >;
      };

      layer_fn {
        bindings = <
          &kp TSKMNG  &trans  &kp F10     &kp F11   &kp F12     &trans  &none                                                &mo MOD  &trans  &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &trans        &kp C_AL_CALC
          &trans      &trans  &kp F7      &kp F8    &kp F9      &trans  &none                                                &none    &trans  &kp N7       &kp N8        &kp N9          &kp KP_MINUS  &trans
          &trans      &trans  &kp F4      &kp F5    &kp F6      &trans  &none        &trans  &trans    &trans  &trans        &none    &trans  &kp N4       &kp N5        &kp N6          &kp KP_PLUS   &trans
          &trans      &trans  &kp F1      &kp F2    &kp F3      &trans                       &to 0     &trans                         &trans  &kp N1       &kp N2        &kp N3          &kp KP_ENTER  &trans
          &to 0       &trans  &kp C_PREV  &kp C_PP  &kp C_NEXT               &trans  &trans  &trans    &trans  &trans  &kp N0                 &kp C_VOL_UP &kp C_VOL_DN  &kp KP_DOT      &kp C_MUTE    &to 0
        >;
      };

      layer_win {
        bindings = <
          &trans  &kp RG(N1)     &kp RG(N2)    &kp RG(N3)    &kp RG(N4)     &kp RG(N5)  &none                                                             &mo MOD  &kp RG(N6)  &kp RG(N7)  &kp RG(N8)    &kp RG(N9)   &kp RG(N0)     &trans
          &trans  &kp RG(SQT)    &kp RG(COMMA) &kp RG(DOT)   &kp RG(P)      &kp RG(Y)   &none                                                             &none    &kp RG(F)   &kp RG(G)   &kp RG(C)     &kp RG(R)    &kp RG(L)      &trans
          &trans  &kp RG(A)      &kp RG(O)     &kp RG(E)     &kp RG(U)      &kp RG(I)   &none        &trans         &trans    &trans  &trans              &none    &kp RG(D)   &kp RG(H)   &kp RG(T)     &kp RG(N)    &kp RG(S)      &trans
          &trans  &kp RG(SEMI)   &kp RG(Q)     &kp RG(J)     &kp RG(K)      &kp RG(X)                               &trans    &trans                               &kp RG(B)   &kp RG(M)   &kp RG(W)     &kp RG(V)    &kp RG(Z)      &trans
          &trans  &kp RG(PG_UP)  &kp RG(HOME)  &kp RG(LEFT)  &kp RG(RIGHT)                   &trans  &kp RG(RSHFT)  &trans    &trans  &kp RG(RSHFT) &trans                     &kp RG(UP)  &kp RG(DOWN)  &kp RG(END)  &kp RG(PG_DN)  &trans
        >;
      };

      layer_uni {
        bindings = <
          &trans  &trans  &kp F10     &kp F11   &kp F12     &trans  &none                                                &mo MOD  &trans  &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &trans        &kp C_AL_CALC
          &trans  &trans  &kp F7      &kp F8    &kp F9      &trans  &none                                                &none    &trans  &kp N7       &kp N8        &kp N9          &kp KP_MINUS  &trans
          &trans  &macro_aa  &macro_pound      &kp F5    &kp F6      &trans  &none        &trans  &trans    &trans  &trans        &none    &trans  &kp N4       &kp N5        &kp N6          &kp KP_PLUS   &trans
          &trans  &trans  &kp F1      &kp F2    &kp F3      &trans                       &trans     &trans                         &trans  &kp N1       &kp N2        &kp N3          &kp KP_ENTER  &trans
          &trans  &trans  &kp C_PREV  &kp C_PP  &kp C_NEXT               &trans  &trans  &trans    &trans  &trans  &kp N0                 &kp C_VOL_UP &kp C_VOL_DN  &kp KP_DOT      &kp C_MUTE    &trans
        >;
      };

      mod {
        bindings = <
          &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                             &trans                 &none &none      &none      &none &none &none
          &none &none        &none        &none        &none        &none        &bootloader                                                       &bootloader            &none &none      &none      &none &none &none
          &none &none        &none        &none        &none        &none        &none            &none &none &bt BT_CLR &none                     &rgb_ug RGB_MEFS_CMD 5 &none &none      &none      &none &none &none
          &none &none        &none        &none        &macro_ver   &none                               &none &none                                                       &none &none      &none      &none &none &none
          &none &none        &none        &none        &none                                &none &none &none &none      &bl BL_TOG &rgb_ug RGB_TOG                             &bl BL_INC &bl BL_DEC &none &none &none
        >;
      };

    };
};
